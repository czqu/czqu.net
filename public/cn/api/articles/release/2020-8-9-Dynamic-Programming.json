{"title":"算法与数据结构学习笔记：动态规划","slug":"release/2020-8-9-Dynamic-Programming","date":"2020-09-11T03:40:00.000Z","updated":"2020-09-11T03:40:00.000Z","comments":true,"path":"api/articles/release/2020-8-9-Dynamic-Programming.json","excerpt":"线性 DP最经典单串300. 最长上升子序列 给定一个无序的整数数组，找到其中最长上升子序列的长度。 示例: 输入: [10,9,2,5,3,7,101,18]输出: 4解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。 12345678910111213141516171819class Solution {public: int lengthOfLIS(vector&lt;int&gt;&amp; nums) { int maxLength=0; vector&lt;int&gt; dp(nums.size(),1); for(int i=0;i&lt;nums.size();i++) { for(int j=0;j&lt;i;j++) { if(nums[i]&gt;nums[j]&amp;&amp;dp[i]&lt;(dp[j]+1)) { dp[i]=dp[j]+1; } } maxLength=max(maxLength,dp[i]); } return maxLength; }}; 最经典双串：1143. 最长公共子序列12345678910111213","covers":null,"content":"<h2 id=\"线性-DP\"><a href=\"#线性-DP\" class=\"headerlink\" title=\"线性 DP\"></a>线性 DP</h2><h3 id=\"最经典单串\"><a href=\"#最经典单串\" class=\"headerlink\" title=\"最经典单串\"></a>最经典单串</h3><h4 id=\"300-最长上升子序列\"><a href=\"#300-最长上升子序列\" class=\"headerlink\" title=\"300. 最长上升子序列\"></a><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300. 最长上升子序列</a></h4><blockquote>\n<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n<p>示例:</p>\n<p>输入: [10,9,2,5,3,7,101,18]<br>输出: 4<br>解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class=\"line\">        <span class=\"type\">int</span> maxLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(nums.size(),<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]&gt;nums[j]&amp;&amp;dp[i]&lt;(dp[j]<span class=\"number\">+1</span>))</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    dp[i]=dp[j]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            maxLength=<span class=\"built_in\">max</span>(maxLength,dp[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"最经典双串：\"><a href=\"#最经典双串：\" class=\"headerlink\" title=\"最经典双串：\"></a>最经典双串：</h3><h4 id=\"1143-最长公共子序列\"><a href=\"#1143-最长公共子序列\" class=\"headerlink\" title=\"1143. 最长公共子序列\"></a><a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\">1143. 最长公共子序列</a></h4><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(string text1, string text2)</span> </span>{</span><br><span class=\"line\">        <span class=\"type\">int</span> len1=text<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> len2=text<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[len1<span class=\"number\">+2</span>][len2<span class=\"number\">+2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1[i<span class=\"number\">-1</span>]==text2[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                {</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"经典问题：\"><a href=\"#经典问题：\" class=\"headerlink\" title=\"经典问题：\"></a>经典问题：</h3>","more":"<h2 id=\"线性-DP\"><a href=\"#线性-DP\" class=\"headerlink\" title=\"线性 DP\"></a>线性 DP</h2><h3 id=\"最经典单串\"><a href=\"#最经典单串\" class=\"headerlink\" title=\"最经典单串\"></a>最经典单串</h3><h4 id=\"300-最长上升子序列\"><a href=\"#300-最长上升子序列\" class=\"headerlink\" title=\"300. 最长上升子序列\"></a><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300. 最长上升子序列</a></h4><blockquote>\n<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n<p>示例:</p>\n<p>输入: [10,9,2,5,3,7,101,18]<br>输出: 4<br>解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(nums.size(),<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i]&gt;nums[j]&amp;&amp;dp[i]&lt;(dp[j]<span class=\"number\">+1</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i]=dp[j]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxLength=<span class=\"built_in\">max</span>(maxLength,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最经典双串：\"><a href=\"#最经典双串：\" class=\"headerlink\" title=\"最经典双串：\"></a>最经典双串：</h3><h4 id=\"1143-最长公共子序列\"><a href=\"#1143-最长公共子序列\" class=\"headerlink\" title=\"1143. 最长公共子序列\"></a><a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\">1143. 最长公共子序列</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(string text1, string text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> len1=text<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> len2=text<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> dp[len1<span class=\"number\">+2</span>][len2<span class=\"number\">+2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1[i<span class=\"number\">-1</span>]==text2[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"经典问题：\"><a href=\"#经典问题：\" class=\"headerlink\" title=\"经典问题：\"></a>经典问题：</h3>","categories":[],"tags":[{"name":"cpp","path":"api/tags/cpp.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"动态规划","path":"api/tags/动态规划.json"}]}