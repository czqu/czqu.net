{"title":"算法与数据结构学习笔记：二分法","slug":"release/2020-8-9-binary-search","date":"2020-09-11T14:00:00.000Z","updated":"2020-09-11T14:00:00.000Z","comments":true,"path":"api/articles/release/2020-8-9-binary-search.json","excerpt":"二分搜索模板给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1 模板四点要素 1、初始化：start=0、end=len-1 2、循环退出条件：start + 1 &lt; end 3、比较中点和目标值：A[mid] ==、 &lt;、&gt; target 4、判断最后两个元素是否符合：A[start]、A[end] ? target 注意：为了防止overflow，超过int范围，左中位数（a+b)=a+(b-a)/2,右中位数（a+b)=a+(b-a+1)/2如果有mid*mid,mid用int注意溢出 时间复杂度 O(logn)，使用场景一般是有序数组的查找 典型示例 704. 二分查找 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 1234567891011121314151617181920212223242526class Solution {public: int search(vector&lt;int&gt;","covers":null,"content":"<h1 id=\"二分搜索模板\"><a href=\"#二分搜索模板\" class=\"headerlink\" title=\"二分搜索模板\"></a>二分搜索模板</h1><p>给一个<strong>有序数组</strong>和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1</p>\n<p>模板四点要素</p>\n<ul>\n<li>1、初始化：start=0、end=len-1</li>\n<li>2、循环退出条件：start + 1 &lt; end</li>\n<li>3、比较中点和目标值：A[mid] ==、 &lt;、&gt; target</li>\n<li>4、判断最后两个元素是否符合：A[start]、A[end] ? target</li>\n</ul>\n<p>注意：为了防止overflow，超过int范围，左中位数（a+b)=a+(b-a)/2,右中位数（a+b)=a+(b-a+1)/2如果有mid*mid,mid用int注意溢出</p>\n<p>时间复杂度 O(logn)，使用场景一般是有序数组的查找</p>\n<p>典型示例</p>\n<h4 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">704. 二分查找</a></h4><blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>{</span><br><span class=\"line\">        <span class=\"type\">int</span> start,mid,end;</span><br><span class=\"line\">        start=<span class=\"number\">0</span>;</span><br><span class=\"line\">        end=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=end)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            mid=start+(end-start)/<span class=\"number\">2</span>;<span class=\"comment\">//防止两数之和超过int范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]==target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                end=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span>{</span><br><span class=\"line\">                start=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可</p>\n<p>另外二分查找还有一些其他模板如下文，大部分场景模板#3 都能解决问题，而且还能找第一次/最后一次出现的位置，应用更加广泛</p>\n<p>所以用模板#3 就对了</p>\n<p><strong>模板 #1 (left &lt;= right)</strong></p>\n<p>二分查找的最基础和最基本的形式。<br>查找条件可以在不与元素的两侧进行比较的情况下确定（或使用它周围的特定元素）。<br>不需要后处理，因为每一步中，你都在检查是否找到了元素。如果到达末尾，则知道未找到该元素。</p>\n<p><strong>模板 #2 (left &lt; right)</strong></p>\n<p>一种实现二分查找的高级方法。<br>查找条件需要访问元素的直接右邻居。<br>使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。<br>保证查找空间在每一步中至少有 2 个元素。<br>需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。</p>\n<p><strong>模板 #3 (left + 1 &lt; right)</strong></p>\n<p>实现二分查找的另一种方法。<br>搜索条件需要访问元素的直接左右邻居。<br>使用元素的邻居来确定它是向右还是向左。<br>保证查找空间在每个步骤中至少有 3 个元素。<br>需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。</p>\n<p>如果是最简单的二分搜索，不需要找第一个、最后一个位置、或者是没有重复元素，可以使用模板#1，代码更简洁</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>二分搜索核心四点要素（必背&amp;理解）</p>\n<ul>\n<li>1、初始化：start=0、end=len-1</li>\n<li>2、循环退出条件：start + 1 &lt; end</li>\n<li>3、比较中点和目标值：A[mid] ==、 &lt;、&gt; target</li>\n<li>4、判断最后两个元素是否符合：A[start]、A[end] ? target</li>\n</ul>\n","more":"<h1 id=\"二分搜索模板\"><a href=\"#二分搜索模板\" class=\"headerlink\" title=\"二分搜索模板\"></a>二分搜索模板</h1><p>给一个<strong>有序数组</strong>和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1</p>\n<p>模板四点要素</p>\n<ul>\n<li>1、初始化：start=0、end=len-1</li>\n<li>2、循环退出条件：start + 1 &lt; end</li>\n<li>3、比较中点和目标值：A[mid] ==、 &lt;、&gt; target</li>\n<li>4、判断最后两个元素是否符合：A[start]、A[end] ? target</li>\n</ul>\n<p>注意：为了防止overflow，超过int范围，左中位数（a+b)=a+(b-a)/2,右中位数（a+b)=a+(b-a+1)/2如果有mid*mid,mid用int注意溢出</p>\n<p>时间复杂度 O(logn)，使用场景一般是有序数组的查找</p>\n<p>典型示例</p>\n<h4 id=\"704-二分查找\"><a href=\"#704-二分查找\" class=\"headerlink\" title=\"704. 二分查找\"></a><a href=\"https://leetcode-cn.com/problems/binary-search/\">704. 二分查找</a></h4><blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> start,mid,end;</span><br><span class=\"line\">        start=<span class=\"number\">0</span>;</span><br><span class=\"line\">        end=nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=end)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mid=start+(end-start)/<span class=\"number\">2</span>;<span class=\"comment\">//防止两数之和超过int范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]==target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;target)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                end=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                start=mid<span class=\"number\">+1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可</p>\n<p>另外二分查找还有一些其他模板如下文，大部分场景模板#3 都能解决问题，而且还能找第一次/最后一次出现的位置，应用更加广泛</p>\n<p>所以用模板#3 就对了</p>\n<p><strong>模板 #1 (left &lt;= right)</strong></p>\n<p>二分查找的最基础和最基本的形式。<br>查找条件可以在不与元素的两侧进行比较的情况下确定（或使用它周围的特定元素）。<br>不需要后处理，因为每一步中，你都在检查是否找到了元素。如果到达末尾，则知道未找到该元素。</p>\n<p><strong>模板 #2 (left &lt; right)</strong></p>\n<p>一种实现二分查找的高级方法。<br>查找条件需要访问元素的直接右邻居。<br>使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。<br>保证查找空间在每一步中至少有 2 个元素。<br>需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。</p>\n<p><strong>模板 #3 (left + 1 &lt; right)</strong></p>\n<p>实现二分查找的另一种方法。<br>搜索条件需要访问元素的直接左右邻居。<br>使用元素的邻居来确定它是向右还是向左。<br>保证查找空间在每个步骤中至少有 3 个元素。<br>需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。</p>\n<p>如果是最简单的二分搜索，不需要找第一个、最后一个位置、或者是没有重复元素，可以使用模板#1，代码更简洁</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>二分搜索核心四点要素（必背&amp;理解）</p>\n<ul>\n<li>1、初始化：start=0、end=len-1</li>\n<li>2、循环退出条件：start + 1 &lt; end</li>\n<li>3、比较中点和目标值：A[mid] ==、 &lt;、&gt; target</li>\n<li>4、判断最后两个元素是否符合：A[start]、A[end] ? target</li>\n</ul>\n","categories":[],"tags":[{"name":"cpp","path":"api/tags/cpp.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"二分法","path":"api/tags/二分法.json"}]}