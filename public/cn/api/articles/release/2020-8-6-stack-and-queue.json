{"title":"算法与数据结构学习笔记：栈和队列","slug":"release/2020-8-6-stack-and-queue","date":"2020-09-11T03:00:00.000Z","updated":"2020-09-11T03:00:00.000Z","comments":true,"path":"api/articles/release/2020-8-6-stack-and-queue.json","excerpt":"简介栈的特点是后入先出，根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于 DFS 深度搜索 队列一般常用于 BFS 广度搜索，类似一层一层的搜索 栈155. 最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) —— 将元素 x 推入栈中。pop() —— 删除栈顶的元素。top() —— 获取栈顶元素。getMin() —— 检索栈中的最小元素。 辅助栈12345678910111213141516171819202122232425262728293031323334353637383940class MinStack {public: /** initialize your data structure here. */ stack&lt;int&gt; minStack; stack&lt;int&gt; dataStack; MinStack() { minStack.push(INT_MAX); } void push(int x) { dataStack.push(x); minStack.push(","covers":null,"content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>栈的特点是后入先出，根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于 DFS 深度搜索</p>\n<p>队列一般常用于 BFS 广度搜索，类似一层一层的搜索</p>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h4 id=\"155-最小栈\"><a href=\"#155-最小栈\" class=\"headerlink\" title=\"155. 最小栈\"></a><a href=\"https://leetcode-cn.com/problems/min-stack/\">155. 最小栈</a></h4><blockquote>\n<p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n<p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p>\n</blockquote>\n<h6 id=\"辅助栈\"><a href=\"#辅助栈\" class=\"headerlink\" title=\"辅助栈\"></a>辅助栈</h6><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; minStack;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; dataStack;</span><br><span class=\"line\">    <span class=\"built_in\">MinStack</span>() {</span><br><span class=\"line\">       minStack.<span class=\"built_in\">push</span>(INT_MAX);</span><br><span class=\"line\">        </span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>{</span><br><span class=\"line\">        dataStack.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        minStack.<span class=\"built_in\">push</span>(<span class=\"built_in\">min</span>(minStack.<span class=\"built_in\">top</span>(),x));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        minStack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        dataStack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataStack.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minStack.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MinStack* obj = new MinStack();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;push(x);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;pop();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_3 = obj-&gt;top();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_4 = obj-&gt;getMin();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"150-逆波兰表达式求值\"><a href=\"#150-逆波兰表达式求值\" class=\"headerlink\" title=\"150. 逆波兰表达式求值\"></a><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/\">150. 逆波兰表达式求值</a></h4><blockquote>\n<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\"> 逆波兰表示法</a>，求表达式的值。</p>\n<p>有效的运算符包括 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n</blockquote>\n<p>思路：通过栈保存原来的元素，遇到表达式弹出运算，再推入结果，重复这个过程</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(vector&lt;string&gt;&amp; tokens)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tokens.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;tokens.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">\"+\"</span>||tokens[i]==<span class=\"string\">\"-\"</span>||tokens[i]==<span class=\"string\">\"*\"</span>||tokens[i]==<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(st.<span class=\"built_in\">size</span>()&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> b=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> a=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"type\">int</span> res;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(tokens[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">                    {</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                            res=a+b;                           </span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                            res=a-b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:</span><br><span class=\"line\">                            res=a*b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">                            res=a/b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(res);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(<span class=\"built_in\">atoi</span>(tokens[i].<span class=\"built_in\">c_str</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"394-字符串解码\"><a href=\"#394-字符串解码\" class=\"headerlink\" title=\"394. 字符串解码\"></a><a href=\"https://leetcode-cn.com/problems/decode-string/\">394. 字符串解码</a></h4><blockquote>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">decodeString</span><span class=\"params\">(string s)</span> </span>{</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; nums;</span><br><span class=\"line\">        stack&lt;string&gt; strs;</span><br><span class=\"line\">        string res=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"type\">char</span> ch=s[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"comment\">//多位数情况处理</span></span><br><span class=\"line\">                num=num*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((ch &gt;= <span class=\"string\">'a'</span> &amp;&amp; ch &lt;= <span class=\"string\">'z'</span>) ||(ch &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch &lt;= <span class=\"string\">'Z'</span>))</span><br><span class=\"line\">            {</span><br><span class=\"line\">                res+=ch;</span><br><span class=\"line\"></span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch==<span class=\"string\">'['</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                nums.<span class=\"built_in\">push</span>(num);</span><br><span class=\"line\">                num=<span class=\"number\">0</span>;</span><br><span class=\"line\">                strs.<span class=\"built_in\">push</span>(res);</span><br><span class=\"line\">                res=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"type\">int</span> j=nums.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                nums.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(j--)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    strs.<span class=\"built_in\">top</span>()+=res;</span><br><span class=\"line\">                }</span><br><span class=\"line\">                res=strs.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"comment\">//之后若还是字母，就会直接加到res之后，因为它们是同一级的运算</span></span><br><span class=\"line\">                <span class=\"comment\">//若是左括号，res会被压入strs栈，作为上一层的运算</span></span><br><span class=\"line\">                strs.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            </span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"94-二叉树的中序遍历\"><a href=\"#94-二叉树的中序遍历\" class=\"headerlink\" title=\"94. 二叉树的中序遍历\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历</a></h4><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode {</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class=\"line\"><span class=\"comment\"> * };</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:   </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>{</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;       </span><br><span class=\"line\">        stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> cur=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur!=<span class=\"literal\">NULL</span>||!st.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">                cur=cur-&gt;left;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            cur=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(cur-&gt;val);</span><br><span class=\"line\">            cur=cur-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">         </span><br><span class=\"line\">       </span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"133-克隆图\"><a href=\"#133-克隆图\" class=\"headerlink\" title=\"133. 克隆图\"></a><a href=\"https://leetcode-cn.com/problems/clone-graph/\">133. 克隆图</a></h4><blockquote>\n<p>给你无向 <strong><a href=\"https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995?fr=aladdin\">连通</a></strong> 图中一个节点的引用，请你返回该图的 <a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin\"><strong>深拷贝</strong></a>（克隆）。</p>\n<p>图中的每个节点都包含它的值 <code>val</code>（<code>int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> {</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> val;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> List&lt;Node&gt; neighbors;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// Definition for a Node.</span></span><br><span class=\"line\"><span class=\"comment\">class Node {</span></span><br><span class=\"line\"><span class=\"comment\">public:</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;Node*&gt; neighbors;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node() {</span></span><br><span class=\"line\"><span class=\"comment\">        val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">    }</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int _val) {</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">    }</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int _val, vector&lt;Node*&gt; _neighbors) {</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = _neighbors;</span></span><br><span class=\"line\"><span class=\"comment\">    }</span></span><br><span class=\"line\"><span class=\"comment\">};</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unordered_map&lt;Node*,Node*&gt; mp;</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">cloneGraph</span><span class=\"params\">(Node* node)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(node))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mp[node];</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> newnode=<span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(node-&gt;val);</span><br><span class=\"line\">        mp[node]=newnode;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> n:node-&gt;neighbors)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            mp[node]-&gt;neighbors.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">cloneGraph</span>(n));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mp[node];</span><br><span class=\"line\">        </span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"200-岛屿数量\"><a href=\"#200-岛屿数量\" class=\"headerlink\" title=\"200. 岛屿数量\"></a><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量</a></h4><blockquote>\n<p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; grid)</span> </span>{</span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"built_in\">size</span>(); i++){</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); j++){</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">'1'</span>){</span><br><span class=\"line\">                    <span class=\"built_in\">dfs</span>(grid, i, j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>{</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= grid.<span class=\"built_in\">size</span>() || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() || grid[i][j] != <span class=\"string\">'1'</span>){</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       }</span><br><span class=\"line\"></span><br><span class=\"line\">       grid[i][j] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i, j - <span class=\"number\">1</span>);</span><br><span class=\"line\">   }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"84-柱状图中最大的矩形\"><a href=\"#84-柱状图中最大的矩形\" class=\"headerlink\" title=\"84. 柱状图中最大的矩形\"></a><a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/\">84. 柱状图中最大的矩形</a></h4><h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h4 id=\"232-用栈实现队列\"><a href=\"#232-用栈实现队列\" class=\"headerlink\" title=\"232. 用栈实现队列\"></a><a href=\"https://leetcode-cn.com/problems/implement-queue-using-stacks/\">232. 用栈实现队列</a></h4><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s1,s2;</span><br><span class=\"line\">    <span class=\"type\">int</span> front;</span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"built_in\">MyQueue</span>() {</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Push element x to the back of queue. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            front=x;</span><br><span class=\"line\">        s<span class=\"number\">1.</span><span class=\"built_in\">push</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            {</span><br><span class=\"line\">                s<span class=\"number\">2.</span><span class=\"built_in\">push</span>(s<span class=\"number\">1.</span><span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"type\">int</span> ret =s<span class=\"number\">2.</span><span class=\"built_in\">top</span>();</span><br><span class=\"line\">        s<span class=\"number\">2.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Get the front element. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s<span class=\"number\">2.</span><span class=\"built_in\">top</span>();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> front;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Returns whether the queue is empty. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>()&amp;&amp;s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MyQueue* obj = new MyQueue();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;push(x);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_2 = obj-&gt;pop();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_3 = obj-&gt;peek();</span></span><br><span class=\"line\"><span class=\"comment\"> * bool param_4 = obj-&gt;empty();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h4 id=\"102-二叉树的层序遍历\"><a href=\"#102-二叉树的层序遍历\" class=\"headerlink\" title=\"102. 二叉树的层序遍历\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\">102. 二叉树的层序遍历</a></h4><blockquote>\n<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode {</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class=\"line\"><span class=\"comment\"> * };</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root) {</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        {</span><br><span class=\"line\">           <span class=\"type\">int</span> currentLevelSize=q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">           vector&lt;<span class=\"type\">int</span>&gt; level;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;currentLevelSize;i++)</span><br><span class=\"line\">           {</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> cur=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                level.<span class=\"built_in\">push_back</span>(cur-&gt;val);</span><br><span class=\"line\">                q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur-&gt;left)</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur-&gt;right)</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(cur-&gt;right);               </span><br><span class=\"line\">           }</span><br><span class=\"line\">           res.<span class=\"built_in\">push_back</span>(level);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        </span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"542-01-矩阵\"><a href=\"#542-01-矩阵\" class=\"headerlink\" title=\"542. 01 矩阵\"></a><a href=\"https://leetcode-cn.com/problems/01-matrix/\">542. 01 矩阵</a></h4>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>栈的特点是后入先出，根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于 DFS 深度搜索</p>\n<p>队列一般常用于 BFS 广度搜索，类似一层一层的搜索</p>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h4 id=\"155-最小栈\"><a href=\"#155-最小栈\" class=\"headerlink\" title=\"155. 最小栈\"></a><a href=\"https://leetcode-cn.com/problems/min-stack/\">155. 最小栈</a></h4><blockquote>\n<p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n<p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p>\n</blockquote>\n<h6 id=\"辅助栈\"><a href=\"#辅助栈\" class=\"headerlink\" title=\"辅助栈\"></a>辅助栈</h6><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; minStack;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; dataStack;</span><br><span class=\"line\">    <span class=\"built_in\">MinStack</span>() &#123;</span><br><span class=\"line\">       minStack.<span class=\"built_in\">push</span>(INT_MAX);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        dataStack.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        minStack.<span class=\"built_in\">push</span>(<span class=\"built_in\">min</span>(minStack.<span class=\"built_in\">top</span>(),x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        minStack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        dataStack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataStack.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minStack.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MinStack* obj = new MinStack();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;push(x);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;pop();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_3 = obj-&gt;top();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_4 = obj-&gt;getMin();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"150-逆波兰表达式求值\"><a href=\"#150-逆波兰表达式求值\" class=\"headerlink\" title=\"150. 逆波兰表达式求值\"></a><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/\">150. 逆波兰表达式求值</a></h4><blockquote>\n<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\"> 逆波兰表示法</a>，求表达式的值。</p>\n<p>有效的运算符包括 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n</blockquote>\n<p>思路：通过栈保存原来的元素，遇到表达式弹出运算，再推入结果，重复这个过程</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tokens.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;tokens.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&quot;+&quot;</span>||tokens[i]==<span class=\"string\">&quot;-&quot;</span>||tokens[i]==<span class=\"string\">&quot;*&quot;</span>||tokens[i]==<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(st.<span class=\"built_in\">size</span>()&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> b=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> a=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"type\">int</span> res;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(tokens[i][<span class=\"number\">0</span>])</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                            res=a+b;                           </span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                            res=a-b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                            res=a*b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                            res=a/b;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(<span class=\"built_in\">atoi</span>(tokens[i].<span class=\"built_in\">c_str</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"394-字符串解码\"><a href=\"#394-字符串解码\" class=\"headerlink\" title=\"394. 字符串解码\"></a><a href=\"https://leetcode-cn.com/problems/decode-string/\">394. 字符串解码</a></h4><blockquote>\n<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">decodeString</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; nums;</span><br><span class=\"line\">        stack&lt;string&gt; strs;</span><br><span class=\"line\">        string res=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> num=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> ch=s[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//多位数情况处理</span></span><br><span class=\"line\">                num=num*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((ch &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;z&#x27;</span>) ||(ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res+=ch;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nums.<span class=\"built_in\">push</span>(num);</span><br><span class=\"line\">                num=<span class=\"number\">0</span>;</span><br><span class=\"line\">                strs.<span class=\"built_in\">push</span>(res);</span><br><span class=\"line\">                res=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> j=nums.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                nums.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(j--)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    strs.<span class=\"built_in\">top</span>()+=res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res=strs.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"comment\">//之后若还是字母，就会直接加到res之后，因为它们是同一级的运算</span></span><br><span class=\"line\">                <span class=\"comment\">//若是左括号，res会被压入strs栈，作为上一层的运算</span></span><br><span class=\"line\">                strs.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"94-二叉树的中序遍历\"><a href=\"#94-二叉树的中序遍历\" class=\"headerlink\" title=\"94. 二叉树的中序遍历\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">94. 二叉树的中序遍历</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:   </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;       </span><br><span class=\"line\">        stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> cur=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur!=<span class=\"literal\">NULL</span>||!st.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">                cur=cur-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur=st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(cur-&gt;val);</span><br><span class=\"line\">            cur=cur-&gt;right;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">         </span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"133-克隆图\"><a href=\"#133-克隆图\" class=\"headerlink\" title=\"133. 克隆图\"></a><a href=\"https://leetcode-cn.com/problems/clone-graph/\">133. 克隆图</a></h4><blockquote>\n<p>给你无向 <strong><a href=\"https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995?fr=aladdin\">连通</a></strong> 图中一个节点的引用，请你返回该图的 <a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin\"><strong>深拷贝</strong></a>（克隆）。</p>\n<p>图中的每个节点都包含它的值 <code>val</code>（<code>int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> val;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> List&lt;Node&gt; neighbors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// Definition for a Node.</span></span><br><span class=\"line\"><span class=\"comment\">class Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">public:</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;Node*&gt; neighbors;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int _val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val = _val;</span></span><br><span class=\"line\"><span class=\"comment\">        neighbors = _neighbors;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unordered_map&lt;Node*,Node*&gt; mp;</span><br><span class=\"line\">    <span class=\"function\">Node* <span class=\"title\">cloneGraph</span><span class=\"params\">(Node* node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(node))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mp[node];</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> newnode=<span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(node-&gt;val);</span><br><span class=\"line\">        mp[node]=newnode;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> n:node-&gt;neighbors)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[node]-&gt;neighbors.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">cloneGraph</span>(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mp[node];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"200-岛屿数量\"><a href=\"#200-岛屿数量\" class=\"headerlink\" title=\"200. 岛屿数量\"></a><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量</a></h4><blockquote>\n<p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">dfs</span>(grid, i, j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= grid.<span class=\"built_in\">size</span>() || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() || grid[i][j] != <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       grid[i][j] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"built_in\">dfs</span>(grid, i, j - <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"84-柱状图中最大的矩形\"><a href=\"#84-柱状图中最大的矩形\" class=\"headerlink\" title=\"84. 柱状图中最大的矩形\"></a><a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/\">84. 柱状图中最大的矩形</a></h4><h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h4 id=\"232-用栈实现队列\"><a href=\"#232-用栈实现队列\" class=\"headerlink\" title=\"232. 用栈实现队列\"></a><a href=\"https://leetcode-cn.com/problems/implement-queue-using-stacks/\">232. 用栈实现队列</a></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s1,s2;</span><br><span class=\"line\">    <span class=\"type\">int</span> front;</span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"built_in\">MyQueue</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Push element x to the back of queue. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            front=x;</span><br><span class=\"line\">        s<span class=\"number\">1.</span><span class=\"built_in\">push</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                s<span class=\"number\">2.</span><span class=\"built_in\">push</span>(s<span class=\"number\">1.</span><span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s<span class=\"number\">1.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret =s<span class=\"number\">2.</span><span class=\"built_in\">top</span>();</span><br><span class=\"line\">        s<span class=\"number\">2.</span><span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Get the front element. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s<span class=\"number\">2.</span><span class=\"built_in\">top</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> front;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Returns whether the queue is empty. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s<span class=\"number\">1.</span><span class=\"built_in\">empty</span>()&amp;&amp;s<span class=\"number\">2.</span><span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MyQueue* obj = new MyQueue();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;push(x);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_2 = obj-&gt;pop();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_3 = obj-&gt;peek();</span></span><br><span class=\"line\"><span class=\"comment\"> * bool param_4 = obj-&gt;empty();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"102-二叉树的层序遍历\"><a href=\"#102-二叉树的层序遍历\" class=\"headerlink\" title=\"102. 二叉树的层序遍历\"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\">102. 二叉树的层序遍历</a></h4><blockquote>\n<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"type\">int</span> currentLevelSize=q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">           vector&lt;<span class=\"type\">int</span>&gt; level;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;currentLevelSize;i++)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> cur=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                level.<span class=\"built_in\">push_back</span>(cur-&gt;val);</span><br><span class=\"line\">                q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur-&gt;left)</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur-&gt;right)</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(cur-&gt;right);               </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           res.<span class=\"built_in\">push_back</span>(level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"542-01-矩阵\"><a href=\"#542-01-矩阵\" class=\"headerlink\" title=\"542. 01 矩阵\"></a><a href=\"https://leetcode-cn.com/problems/01-matrix/\">542. 01 矩阵</a></h4>","categories":[],"tags":[{"name":"cpp","path":"api/tags/cpp.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"栈","path":"api/tags/栈.json"},{"name":"队列","path":"api/tags/队列.json"}]}