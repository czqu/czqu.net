{"title":"本站从即日起全面启用全站网页压缩","slug":"draft/enable-Page-compression","date":"2020-11-13T09:01:18.000Z","updated":"2020-11-13T09:01:18.000Z","comments":true,"path":"api/articles/draft/enable-Page-compression.json","excerpt":"为什么要压缩页面静态资源对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。 那么怎么提高博客的页面加载速度呢？可以从以下的几个方面去入手： 将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。 尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。 对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这","covers":null,"content":"<h1 id=\"为什么要压缩页面静态资源\"><a href=\"#为什么要压缩页面静态资源\" class=\"headerlink\" title=\"为什么要压缩页面静态资源\"></a>为什么要压缩页面静态资源</h1><p>对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。</p>\n<p>那么怎么提高博客的页面加载速度呢？可以从以下的几个方面去入手： </p>\n<ol>\n<li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li>\n<li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li>\n<li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li>\n</ol>\n<p><strong>本站主博客由jekyll构成，子博客由hexo构成，目前均已启用静态网页资源的压缩。</strong></p>\n<h1 id=\"hexo的压缩静态资源插件\"><a href=\"#hexo的压缩静态资源插件\" class=\"headerlink\" title=\"hexo的压缩静态资源插件\"></a>hexo的压缩静态资源插件</h1><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p>\n<p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href=\"https://segmentfault.com/a/1190000009544924#articleHeader8\">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p>\n<p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p>\n<h2 id=\"如何使用hexo-neat\"><a href=\"#如何使用hexo-neat\" class=\"headerlink\" title=\"如何使用hexo-neat\"></a>如何使用hexo-neat</h2><h3 id=\"在站点根目录下安装hexo-neat\"><a href=\"#在站点根目录下安装hexo-neat\" class=\"headerlink\" title=\"在站点根目录下安装hexo-neat\"></a>在站点根目录下安装hexo-neat</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-neat --save1</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"为站点配置文件添加相关配置\"><a href=\"#为站点配置文件添加相关配置\" class=\"headerlink\" title=\"为站点配置文件添加相关配置\"></a>为站点配置文件添加相关配置</h3><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-neat</span><br><span class=\"line\"># 博文压缩</span><br><span class=\"line\">neat_enable: true</span><br><span class=\"line\"># 压缩html</span><br><span class=\"line\">neat_html:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\"># 压缩css  </span><br><span class=\"line\">neat_css:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - '**/*.min.css'</span><br><span class=\"line\"># 压缩js</span><br><span class=\"line\">neat_js:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  mangle: true</span><br><span class=\"line\">  output:</span><br><span class=\"line\">  compress:</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - '**/*.min.js'</span><br><span class=\"line\">    - '**/jquery.fancybox.pack.js'</span><br><span class=\"line\">    - '**/index.js'  12345678910111213141516171819202122</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"hexo-neat插件踩坑记录\"><a href=\"#hexo-neat插件踩坑记录\" class=\"headerlink\" title=\"hexo-neat插件踩坑记录\"></a>hexo-neat插件踩坑记录</h2><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p>\n<h3 id=\"跳过压缩文件的正确配置方式\"><a href=\"#跳过压缩文件的正确配置方式\" class=\"headerlink\" title=\"跳过压缩文件的正确配置方式\"></a>跳过压缩文件的正确配置方式</h3><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neat_css:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - '**/*.min.css'1234</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"压缩html时不要跳过-md文件\"><a href=\"#压缩html时不要跳过-md文件\" class=\"headerlink\" title=\"压缩html时不要跳过.md文件\"></a>压缩html时不要跳过<code>.md</code>文件</h3><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>\n<p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p>\n<h3 id=\"压缩html时不要跳过-swig文件\"><a href=\"#压缩html时不要跳过-swig文件\" class=\"headerlink\" title=\"压缩html时不要跳过.swig文件\"></a>压缩html时不要跳过<code>.swig</code>文件</h3><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/rozbo/hexo-neat\">GitHub项目地址</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008082288\">hexo博客压缩优化</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005799759\">Hexo-Neat介绍</a></li>\n</ol>\n<h1 id=\"jekyll的压缩\"><a href=\"#jekyll的压缩\" class=\"headerlink\" title=\"jekyll的压缩\"></a>jekyll的压缩</h1><p>稍后更新</p>\n","more":"<h1 id=\"为什么要压缩页面静态资源\"><a href=\"#为什么要压缩页面静态资源\" class=\"headerlink\" title=\"为什么要压缩页面静态资源\"></a>为什么要压缩页面静态资源</h1><p>对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。</p>\n<p>那么怎么提高博客的页面加载速度呢？可以从以下的几个方面去入手： </p>\n<ol>\n<li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li>\n<li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li>\n<li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li>\n</ol>\n<p><strong>本站主博客由jekyll构成，子博客由hexo构成，目前均已启用静态网页资源的压缩。</strong></p>\n<h1 id=\"hexo的压缩静态资源插件\"><a href=\"#hexo的压缩静态资源插件\" class=\"headerlink\" title=\"hexo的压缩静态资源插件\"></a>hexo的压缩静态资源插件</h1><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p>\n<p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href=\"https://segmentfault.com/a/1190000009544924#articleHeader8\">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p>\n<p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p>\n<h2 id=\"如何使用hexo-neat\"><a href=\"#如何使用hexo-neat\" class=\"headerlink\" title=\"如何使用hexo-neat\"></a>如何使用hexo-neat</h2><h3 id=\"在站点根目录下安装hexo-neat\"><a href=\"#在站点根目录下安装hexo-neat\" class=\"headerlink\" title=\"在站点根目录下安装hexo-neat\"></a>在站点根目录下安装hexo-neat</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-neat --save1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为站点配置文件添加相关配置\"><a href=\"#为站点配置文件添加相关配置\" class=\"headerlink\" title=\"为站点配置文件添加相关配置\"></a>为站点配置文件添加相关配置</h3><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-neat</span><br><span class=\"line\"># 博文压缩</span><br><span class=\"line\">neat_enable: true</span><br><span class=\"line\"># 压缩html</span><br><span class=\"line\">neat_html:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\"># 压缩css  </span><br><span class=\"line\">neat_css:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - &#x27;**/*.min.css&#x27;</span><br><span class=\"line\"># 压缩js</span><br><span class=\"line\">neat_js:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  mangle: true</span><br><span class=\"line\">  output:</span><br><span class=\"line\">  compress:</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - &#x27;**/*.min.js&#x27;</span><br><span class=\"line\">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class=\"line\">    - &#x27;**/index.js&#x27;  12345678910111213141516171819202122</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-neat插件踩坑记录\"><a href=\"#hexo-neat插件踩坑记录\" class=\"headerlink\" title=\"hexo-neat插件踩坑记录\"></a>hexo-neat插件踩坑记录</h2><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p>\n<h3 id=\"跳过压缩文件的正确配置方式\"><a href=\"#跳过压缩文件的正确配置方式\" class=\"headerlink\" title=\"跳过压缩文件的正确配置方式\"></a>跳过压缩文件的正确配置方式</h3><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neat_css:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - &#x27;**/*.min.css&#x27;1234</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩html时不要跳过-md文件\"><a href=\"#压缩html时不要跳过-md文件\" class=\"headerlink\" title=\"压缩html时不要跳过.md文件\"></a>压缩html时不要跳过<code>.md</code>文件</h3><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>\n<p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p>\n<h3 id=\"压缩html时不要跳过-swig文件\"><a href=\"#压缩html时不要跳过-swig文件\" class=\"headerlink\" title=\"压缩html时不要跳过.swig文件\"></a>压缩html时不要跳过<code>.swig</code>文件</h3><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/rozbo/hexo-neat\">GitHub项目地址</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008082288\">hexo博客压缩优化</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005799759\">Hexo-Neat介绍</a></li>\n</ol>\n<h1 id=\"jekyll的压缩\"><a href=\"#jekyll的压缩\" class=\"headerlink\" title=\"jekyll的压缩\"></a>jekyll的压缩</h1><p>稍后更新</p>\n","categories":[],"tags":[{"name":"运维","path":"api/tags/运维.json"},{"name":"前端","path":"api/tags/前端.json"}]}