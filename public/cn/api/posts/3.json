{"total":67,"pageSize":10,"pageCount":7,"data":[{"title":"Linux 所有命令无法使用的解决方法","slug":null,"date":"2020-11-13T07:39:52.000Z","updated":"2020-11-13T07:39:52.000Z","comments":null,"path":"api/articles/draft/Linux-commands-unavailable.json","excerpt":"这是由于环境变量设置出错导致的 解决方法： 直接在命令行中输入以下代码，然后回车 1export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin 然后输入如下代码， 把错误的环境变量修正： 1sudo vim /etc/profile","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"详解管理root用户权限的sudo服务程序","slug":null,"date":"2020-11-13T07:24:49.000Z","updated":"2020-11-13T07:24:49.000Z","comments":null,"path":"api/articles/draft/Selectively-deploying-your-superpowers-on-Linux.json","excerpt":"sudo 命令允许特权用户以 root 用户身份运行全部或部分命令，但是理解其能做什么和不能做什么很有帮助。 在你想要使用超级权限临时运行一条命令时，sudo 命令非常方便，但是当它不能如你期望的工作时，你也会遇到一些麻烦。比如说你想在某些日志文件结尾添加一些重要的信息，你可能会尝试这样做： 12$ echo \"Important note\" &gt;&gt; /var/log/somelog-bash: /var/log/somelog: Permission denied 好吧，看起来你似乎需要一些额外的特权。一般来说，你不能使用你的用户账号向系统日志中写入东西。我们使用 sudo 再尝试一次吧。 123$ sudo !!sudo echo \"Important note\" &gt;&gt; /var/log/somelog-bash: /var/log/somelog: Permission denied 嗯，它还是没有啥反应。我们来试点不同的吧。 12$ sudo 'echo \"Important note\" &gt;&gt; /var/log/somelog'sudo: ec","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"在Ubuntu中使用Katoolin安装Kali Linux Tools","slug":null,"date":"2020-11-13T07:08:19.000Z","updated":"2020-11-13T07:08:19.000Z","comments":null,"path":"api/articles/draft/Ubuntu-install-Kali-Linux-Tools.json","excerpt":"本文将引导您逐步在Ubuntu中使用Katoolin安装Kali Linux Tools。对于那些不知道的人，Katoolin是一个Python脚本，可用于一次安装所有Kali Linux工具或手动一次安装。Kali Linux具有300多种渗透测试工具。除了安装所有工具，您还可以使用Katoolin在Linux框中仅安装您选择的选择性工具。如果您想在Ubuntu或任何其他基于DEB的系统上尝试使用Kali Linux工具，则应该尝试一下Katoolin。它将在您的Ubuntu系统中添加Kali Linux存储库，以便您可以一次安装所有渗透测试工具，也可以仅安装必要的工具。Katoolin是完全免费的开源软件，并已在基于Debian的系统上经过正式测试。 在Ubuntu 18.04 LTS中安装Katoolin我已经在Ubuntu 18.04 LTS服务器版本中测试了Katoolin。但是，它应该可以在其他Ubuntu版本和派生版本上使用。 确保在Ubuntu系统中安装了以下先决条件。 Python 2.7 Git 这些软件包在Ubuntu的默认源中可用，因此您可以使用apt软件包管理","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"静态编译opencv库","slug":null,"date":"2020-11-13T05:13:58.000Z","updated":"2020-11-13T05:13:58.000Z","comments":null,"path":"api/articles/draft/Statically-compile-opencv-library.json","excerpt":"一、准备： 1.cmake 2.opencv源码 （https://opencv.org/releases/）opencv源码从官网下载源码解压后应该是这样二、编译1.设置源码路径和编译后路径2.点击configure,然后选择配置编译器和编译的opencv库的位数这里我选64位，点击finish：3.等待4.勾选一下可选设置 （1）、勾选“BUILD_opencv_world”，最后生成一个头文件库，相比之前的一堆头文件方便多了。 （2）、添加下载好的modules到OPENCV_EXTRA_MODULES_PATH。 OPENCV_EXTRA_MODULES_PATH配置说明：由于OpenCV功能越来越臃肿，OpenCV3改变了项目架构，使用内核+插件的架构形式。 因此，OpenCV从2.x到4.x是一个很大的转变，对于很多功能不完善、性能不稳定的模块，都被放到了extra_modules（扩展模块）里面了。在Github中，除了存放正式版OpenCV的主仓库和新增加的OpenCV_extra仓库外，还添加了一个OpenCV_contrib的全新仓库，功能有：脸部识别、文本识别、边","keywords":null,"cover":"/cn/posts/19264/20200420204912815.png","content":null,"raw":null,"categories":null,"tags":null},{"title":"修改火狐缓存位置到内存盘","slug":null,"date":"2020-11-13T05:07:11.000Z","updated":"2020-11-13T05:07:11.000Z","comments":null,"path":"api/articles/draft/Modify-Firefox-cache-location-to-RAM-disk.json","excerpt":"1、在地址栏输入about:config 进入设置界面 2、找到browser.cache.memory.max_entry_size设置使用内存缓存大小，设置值为-1，无限制，可以自己选择，设1的话是1kb，依次类推。 3、输入browser.cache.memory.enable，确认值为true，火狐默认为true。 4、输入”browser.cache.disk.enable”, 设置为false 5、然后在选项-高级-网络里，把无视自动缓存管理勾上，再把使用磁盘缓存空间设为0。 这样火狐的缓存就在内存里了。 比较简单，我这里就不上图片了。 最后输入 about:cache 可以查看缓存占用","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"c++杂七杂八的笔记","slug":null,"date":"2020-11-13T05:05:29.000Z","updated":"2020-11-13T05:05:29.000Z","comments":null,"path":"api/articles/draft/cpp-study.json","excerpt":"VS 2017 IDE compiler option” /permissive-“ 类中成员变量的声明顺序，决定了成员变量的初始化顺序。假设 Date 类中的构造函数为： public: Date() ： y_(2016), m_(9), d_(22) {} 此时，类中的成员函数，在类中的声明顺序 = 构造函数初始化列表顺序，故 y_, m_, d_ 都能被顺利的初始化为对应的值。 而当成员变量，在类中的声明顺序 ≠ 构造函数初始化列表顺序 时， public: Date() ： y_(2016), d_(22), m_(d_-13) {} 根据成员变量的声明顺序，y_ 首先被初始化为 2016，然后再初始化 m_，但由于 d_ 并未被初始化，所以 m_ 的值是随机的，最后初始化 d_ 为 22 这是因为，类的成员变量在初始化时，其初始化的顺序只与声明顺序有关，而与在初始化列表中的顺序无关。 scanf函数返回成功读入的数据项数，读入数据时遇到了“文件结束”则返回EOF。 win 换行\\r\\n linux \\n mac \\r linux读取win的文件会读\\r\\n 算法竞赛入门经典 ","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"模运算规则","slug":null,"date":"2020-11-13T05:03:51.000Z","updated":"2020-11-13T05:03:51.000Z","comments":null,"path":"api/articles/draft/Modular-operation-rules.json","excerpt":"模运算与基本四则运算有些相似，但是除法例外。其规则如下： (a + b) % p = (a % p + b % p) % p (a - b) % p = (a % p - b % p) % p (a * b) % p = (a % p * b % p) % p (a^b) % p = ((a % p)^b) % p 推论： 若a≡b (% p)，则对于任意的c，都有(a + c) ≡ (b + c) (%p)； 若a≡b (% p)，则对于任意的c，都有(a * c) ≡ (b * c) (%p)； 若a≡b (% p)，c≡d (% p)，则 (a + c) ≡ (b + d) (%p)，(a - c) ≡ (b - d) (%p)， (a * c) ≡ (b * d) (%p)，(a / c) ≡ (b / d) (%p)； 费马定理：若p是素数，a是正整数且不能被p整除，则：a^(p-1) mod p = 1 mod p 推论：若p是素数，a是正整数且不能被p整除，则：a^p mod p = a mod p","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"一些个人常用的 Git 指令","slug":null,"date":"2020-11-13T04:57:36.000Z","updated":"2020-11-13T04:57:36.000Z","comments":null,"path":"api/articles/draft/Some-personally-used-Git-commands.json","excerpt":"随便整理的一些自用的Git指令 GitHub创建仓库提示代码123456echo \"# 项目名\" &gt;&gt; README.mdgit initgit add README.mdgit commit -m \"first commit\"git remote add origin git@github.com:qiubaiying/项目名.gitgit push -u origin master 若仓库存在直接push 12git remote add origin git@github.com:qiubaiying/test.gitgit push -u origin master 常用操作创建仓库（初始化）12345678在当前指定目录下创建git init新建一个仓库目录git init [project-name]克隆一个远程项目git clone [url] 添加文件到缓存区1添加所有变化的文件 git add . 12添加名称指定文件git add text.txt 配置123设置提交代码时的用户信息git config [--global] user.name \"[na","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null},{"title":"Linux 下将校园网客户端锐捷制作成服务并开机启动","slug":null,"date":"2020-11-13T04:53:23.000Z","updated":"2020-11-13T04:53:23.000Z","comments":null,"path":"api/articles/draft/Make-campus-network-client-Ruijie-into-a-service.json","excerpt":"1.下载锐捷，解压后给rjsupplicant.sh 添加可执行权限 2.创建一个 systemd 启动脚本并将其放在 /etc/systemd/system/ 目录中，内容如下 1234567891011121314151617# ruijie.service[Unit]Description=Run ruijieAfter=network.target[Service]ExecStart=/home/rjsupplicant/rjsupplicant.sh -u stuxxxx -p passwordxxxx -d 0 ExecStop=/home/rjsupplicant/rjsupplicant.sh -qExecReload=/home/rjsupplicant/rjsupplicant.sh -u stuxxxx -p passwordxxxx -d 0Restart=on-failureKillMode=control-group[Install]WantedBy=multi-user.target 3.运行以下命令启动服务 1234systemctl daemon-re","keywords":null,"cover":"/cn/posts/37686/v2-e8d4b949456153fcbba15889f8cff220_r.jpg","content":null,"raw":null,"categories":null,"tags":null},{"title":"简单抵御疑似黑客的ssh登录","slug":null,"date":"2020-11-13T04:51:39.000Z","updated":"2020-11-13T04:51:39.000Z","comments":null,"path":"api/articles/draft/Simply-resist-ssh-login-from-suspected-hackers.json","excerpt":"屏蔽每分钟ssh尝试登陆linux服务器 超过10次的IP进行屏蔽: 123456789#!/bin/bashDATE=$(date +\"%a %b %e %H:%M\") #星期月天时分 %e单数字时显示7，而%d显示07ABNORMAL_IP=$(lastb |grep \"$DATE\" |awk '{a[$3]++}END{for(i ina)if(a[i]&gt;10)print i}')for IP in $ABNORMAL_IP; do if [ $(iptables -vnL |grep -c \"$IP\") -eq 0 ]; then iptables -I INPUT -s $IP -j DROP fidone","keywords":null,"cover":null,"content":null,"raw":null,"categories":null,"tags":null}]}