{"title":"LeetCode 46. Permutations","slug":"release/leetcode-46","date":"2023-03-01T23:16:00.000Z","updated":"2023-03-01T23:16:00.000Z","comments":true,"path":"api/articles/release/leetcode-46.json","excerpt":"Question:Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order. Example 1: 12Input: nums = [1,2,3]Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2: 12Input: nums = [0,1]Output: [[0,1],[1,0]] Example 3: 12Input: nums = [1]Output: [[1]] Constraints: 1 &lt;= nums.length &lt;= 6 -10 &lt;= nums[i] &lt;= 10 All the integers of nums are unique. Solution:Given an array of distinct integers nums, return all possible permu","covers":null,"content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h1><p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,3]</span><br><span class=\"line\">Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [0,1]</span><br><span class=\"line\">Output: [[0,1],[1,0]]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1]</span><br><span class=\"line\">Output: [[1]]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h1><p>Given an array of distinct integers nums, return all possible permutations of its elements. You can return the answer in any order.</p>\n<p>Algorithm</p>\n<p>The problem can be solved by recursively generating all permutations of the array. For a given array nums, the algorithm works as follows:</p>\n<ul>\n<li>If the length of nums is 1, return a list containing nums.</li>\n<li>For each element in nums, generate all permutations of the remaining elements using recursion. This can be done by creating a new array without the current element, and calling the permutation function recursively with the new array.</li>\n<li>For each permutation generated in step 2, add the current element to the beginning of the permutation.</li>\n<li>Return the list of all permutations generated in step 3.</li>\n</ul>\n<p>Java Implementation</p>\n<p>Here’s the Java implementation of the algorithm:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> {</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        permute(nums, <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length], <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">boolean</span>[] used, List&lt;Integer&gt; cur, List&lt;List&lt;Integer&gt;&gt; res)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur.size() == nums.length) {</span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) {</span><br><span class=\"line\">                cur.add(nums[i]);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                permute(nums, used, cur, res);</span><br><span class=\"line\">                cur.remove(cur.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>The permute() function takes an array nums, and returns a list of all permutations of its elements. The function uses a helper function permute() to generate the permutations recursively. The permute() function takes the following arguments:</p>\n<ul>\n<li>nums: the array of integers to be permuted</li>\n<li>used: a boolean array indicating which elements of nums have already been used in the current permutation</li>\n<li>cur: a list representing the current permutation being generated</li>\n<li>res: the list of all permutations generated so far</li>\n</ul>\n<p>Python Implementation</p>\n<p>Here’s the Python implementation of the algorithm:</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">permute</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [nums]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            sub_res = <span class=\"variable language_\">self</span>.permute(nums[:i] + nums[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> sub_res:</span><br><span class=\"line\">                res.append([nums[i]] + j)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></tbody></table></figure>\n\n<p>The permute() function takes an array nums, and returns a list of all permutations of its elements. The function uses recursion to generate the permutations. The permute() function takes the following arguments:</p>\n<ul>\n<li>nums: the array of integers to be permuted</li>\n</ul>\n<p>Time Complexity</p>\n<p>The time complexity of the algorithm is O(n!), where n is the length of the input array. This is because there are n! permutations of n distinct elements, and the algorithm generates each permutation once.</p>\n<p>Space Complexity</p>\n<p>The space complexity of the algorithm is O(n^2), where n is the length of the input array. This is because the algorithm generates n! permutations, each of which has length n. The algorithm uses additional space to store the list of permutations generated so far.</p>\n","more":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h1><p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,3]</span><br><span class=\"line\">Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [0,1]</span><br><span class=\"line\">Output: [[0,1],[1,0]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1]</span><br><span class=\"line\">Output: [[1]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h1><p>Given an array of distinct integers nums, return all possible permutations of its elements. You can return the answer in any order.</p>\n<p>Algorithm</p>\n<p>The problem can be solved by recursively generating all permutations of the array. For a given array nums, the algorithm works as follows:</p>\n<ul>\n<li>If the length of nums is 1, return a list containing nums.</li>\n<li>For each element in nums, generate all permutations of the remaining elements using recursion. This can be done by creating a new array without the current element, and calling the permutation function recursively with the new array.</li>\n<li>For each permutation generated in step 2, add the current element to the beginning of the permutation.</li>\n<li>Return the list of all permutations generated in step 3.</li>\n</ul>\n<p>Java Implementation</p>\n<p>Here’s the Java implementation of the algorithm:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        permute(nums, <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length], <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">boolean</span>[] used, List&lt;Integer&gt; cur, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur.size() == nums.length) &#123;</span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                cur.add(nums[i]);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                permute(nums, used, cur, res);</span><br><span class=\"line\">                cur.remove(cur.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The permute() function takes an array nums, and returns a list of all permutations of its elements. The function uses a helper function permute() to generate the permutations recursively. The permute() function takes the following arguments:</p>\n<ul>\n<li>nums: the array of integers to be permuted</li>\n<li>used: a boolean array indicating which elements of nums have already been used in the current permutation</li>\n<li>cur: a list representing the current permutation being generated</li>\n<li>res: the list of all permutations generated so far</li>\n</ul>\n<p>Python Implementation</p>\n<p>Here’s the Python implementation of the algorithm:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">permute</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [nums]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            sub_res = <span class=\"variable language_\">self</span>.permute(nums[:i] + nums[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> sub_res:</span><br><span class=\"line\">                res.append([nums[i]] + j)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>The permute() function takes an array nums, and returns a list of all permutations of its elements. The function uses recursion to generate the permutations. The permute() function takes the following arguments:</p>\n<ul>\n<li>nums: the array of integers to be permuted</li>\n</ul>\n<p>Time Complexity</p>\n<p>The time complexity of the algorithm is O(n!), where n is the length of the input array. This is because there are n! permutations of n distinct elements, and the algorithm generates each permutation once.</p>\n<p>Space Complexity</p>\n<p>The space complexity of the algorithm is O(n^2), where n is the length of the input array. This is because the algorithm generates n! permutations, each of which has length n. The algorithm uses additional space to store the list of permutations generated so far.</p>\n","categories":[{"name":"LeetCode","path":"api/categories/LeetCode.json"}],"tags":[{"name":"LeetCode","path":"api/tags/LeetCode.json"},{"name":"Java","path":"api/tags/Java.json"}]}