{"title":"How to Retrieve User Addresses in a Spring Boot Application","slug":"release/get-ip-from-request","date":"2023-03-04T12:14:00.000Z","updated":"2023-03-04T12:14:00.000Z","comments":true,"path":"api/articles/release/get-ip-from-request.json","excerpt":"When building a web application, it’s often necessary to retrieve the IP address of the user who is accessing the application. This information can be useful for various purposes, such as security, analytics, and customization. In this tutorial, we will explore how to retrieve both IPv4 and IPv6 addresses of a user in a Spring Boot application. Retrieving User IP AddressIn Spring Boot, we can retrieve the IP address of a user by injecting a HttpServletRequest object into our controller class and","covers":null,"content":"<p>When building a web application, it’s often necessary to retrieve the IP address of the user who is accessing the application. This information can be useful for various purposes, such as security, analytics, and customization. In this tutorial, we will explore how to retrieve both IPv4 and IPv6 addresses of a user in a Spring Boot application.</p>\n<h2 id=\"Retrieving-User-IP-Address\"><a href=\"#Retrieving-User-IP-Address\" class=\"headerlink\" title=\"Retrieving User IP Address\"></a>Retrieving User IP Address</h2><p>In Spring Boot, we can retrieve the IP address of a user by injecting a <code>HttpServletRequest</code> object into our controller class and calling its <code>getRemoteAddr()</code> method. For example:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class UserController {</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HttpServletRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(\"/user/ip\")</span><br><span class=\"line\">    public String getUserIP() {</span><br><span class=\"line\">        String ipAddress = request.getRemoteAddr();</span><br><span class=\"line\">        return ipAddress;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>In the above code, we have injected a <code>HttpServletRequest</code> object using the <code>@Autowired</code> annotation and defined a <code>getUserIP()</code> method that returns the IP address of the user. The <code>getRemoteAddr()</code> method of the <code>HttpServletRequest</code> object returns the IP address of the client or the last proxy that sent the request.</p>\n<p>However, this method may not always return the correct IP address. In some cases, the IP address may be the address of a proxy server or load balancer rather than the actual user’s IP address. To obtain the correct IP address, we can check for the <code>X-Forwarded-For</code> header, which is a standard header used by proxies to indicate the originating IP address of a client connecting to a web server through the proxy. Here’s an updated version of the code that checks for the <code>X-Forwarded-For</code> header:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(\"/user/ip\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserIP</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ipAddress</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">\"X-Forwarded-For\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ipAddress == <span class=\"literal\">null</span> || ipAddress.isEmpty() || <span class=\"string\">\"unknown\"</span>.equalsIgnoreCase(ipAddress)) {</span><br><span class=\"line\">            ipAddress = request.getRemoteAddr();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ipAddress;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>In the above code, we first check for the <code>X-Forwarded-For</code> header using the <code>getHeader()</code> method of the <code>HttpServletRequest</code> object. If the header is not present or its value is empty or “unknown”, we fall back to the <code>getRemoteAddr()</code> method to obtain the IP address.</p>\n","more":"<p>When building a web application, it’s often necessary to retrieve the IP address of the user who is accessing the application. This information can be useful for various purposes, such as security, analytics, and customization. In this tutorial, we will explore how to retrieve both IPv4 and IPv6 addresses of a user in a Spring Boot application.</p>\n<h2 id=\"Retrieving-User-IP-Address\"><a href=\"#Retrieving-User-IP-Address\" class=\"headerlink\" title=\"Retrieving User IP Address\"></a>Retrieving User IP Address</h2><p>In Spring Boot, we can retrieve the IP address of a user by injecting a <code>HttpServletRequest</code> object into our controller class and calling its <code>getRemoteAddr()</code> method. For example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class UserController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HttpServletRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/user/ip&quot;)</span><br><span class=\"line\">    public String getUserIP() &#123;</span><br><span class=\"line\">        String ipAddress = request.getRemoteAddr();</span><br><span class=\"line\">        return ipAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we have injected a <code>HttpServletRequest</code> object using the <code>@Autowired</code> annotation and defined a <code>getUserIP()</code> method that returns the IP address of the user. The <code>getRemoteAddr()</code> method of the <code>HttpServletRequest</code> object returns the IP address of the client or the last proxy that sent the request.</p>\n<p>However, this method may not always return the correct IP address. In some cases, the IP address may be the address of a proxy server or load balancer rather than the actual user’s IP address. To obtain the correct IP address, we can check for the <code>X-Forwarded-For</code> header, which is a standard header used by proxies to indicate the originating IP address of a client connecting to a web server through the proxy. Here’s an updated version of the code that checks for the <code>X-Forwarded-For</code> header:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/ip&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserIP</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ipAddress</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;X-Forwarded-For&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ipAddress == <span class=\"literal\">null</span> || ipAddress.isEmpty() || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class=\"line\">            ipAddress = request.getRemoteAddr();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ipAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we first check for the <code>X-Forwarded-For</code> header using the <code>getHeader()</code> method of the <code>HttpServletRequest</code> object. If the header is not present or its value is empty or “unknown”, we fall back to the <code>getRemoteAddr()</code> method to obtain the IP address.</p>\n","categories":[{"name":"Backend Development","path":"api/categories/Backend Development.json"}],"tags":[{"name":"Backend Development","path":"api/tags/Backend Development.json"}]}